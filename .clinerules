# Cline Rules

## ロール定義

あなたはPython + AWSのエキスパートエンジニアとして対応してください。
## 技術スタック

### バックエンド
Python 3.8以上
Bottleフレームワーク (v0.12.25) - 軽量Webフレームワーク
Gunicorn (v21.2.0) - WSGIサーバー
Gevent (v23.9.1) - 非同期I/Oライブラリ
### Slack連携
Slack SDK (v3.35.0) - SlackのPython SDK
### AWS連携
Boto3 (v1.34.0) - AWS SDK for Python
AWS Bedrock - AIモデル (Claude 3.7 Sonnet) との連携
### その他
python-dotenv (v1.0.0) - 環境変数管理
MCP (v1.6.0) - Model Context Protocol
### アーキテクチャ
クリーンアーキテクチャに近い構造
infrastructure層: 外部サービスとの連携 (SlackClient, BedrockClient)
application層: ビジネスロジック (SlackService)
presentation層: API (SlackAPI)
usecase層: ユースケース実装
### 主な機能
Slackイベント処理 (メンション、DM)
AIモデルを使用した応答生成
MCPサーバーとの連携
イベント重複防止、非同期処理

### 期待する回答
- 実装コードは省略せず、完全な形で提供
- 日本語での詳細な説明

### セキュリティ

### 機密ファイル
以下のファイルの読み取りと変更を禁止：

-   .env ファイル
-   supabase/functions/.env ファイル
-   APIキー、トークン、認証情報を含むすべてのファイル

### セキュリティ対策

-   機密ファイルを絶対にコミットしない
-   シークレット情報は環境変数を使用する
-   ログや出力に認証情報を含めない

### セキュリティ対策

-   機密ファイルを絶対にコミットしない
-   シークレット情報は環境変数を使用する
-   ログや出力に認証情報を含めない

### コーディング規約

- 関数やコンポーネントに冗長なコメントは避け、必要最小限なコメントを記載する

## コンポーネント設計と実装の規約

### 1. ディレクトリ構造とファイル配置

- 機能ごとにディレクトリを分割し、関連するコンポーネントをグループ化


### 7. テスト容易性

- テスト可能なコンポーネント設計

### 6. テスト容易性

- モック可能な設計
- 副作用の分離
- テストデータの準備

#
### 6. テスト容易性

- 単体テストが容易な関数設計
- テストケースのカバレッジ確保
- エッジケースのテスト実装

## テスト実装の規約

